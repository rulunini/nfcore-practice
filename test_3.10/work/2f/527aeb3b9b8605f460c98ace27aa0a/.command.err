WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
Proceeding with single-core trimming (user-defined)
Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 3.4
single-core operation.
No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)



AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> WT_REP1_1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Illumina	3882	AGATCGGAAGAGC	100000	3.88
Nextera	0	CTGTCTCTTATA	100000	0.00
smallRNA	0	TGGAATTCTCGG	100000	0.00
Using Illumina adapter for trimming (count: 3882). Second best hit was Nextera (count: 0)

Writing report to 'WT_REP1_1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: WT_REP1_1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.7
Cutadapt version: 3.4
Number of cores used for trimming: 1
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Running FastQC with the following extra arguments: '-t 2'
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 3.4). Setting -j 1
Writing final adapter and quality trimmed output to WT_REP1_1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file WT_REP1_1.fastq.gz <<< 
This is cutadapt 3.4 with Python 3.9.6
Command line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC WT_REP1_1.fastq.gz
Processing reads on 1 core in single-end mode ...
Finished in 3.50 s (35 µs/read; 1.71 M reads/minute).

=== Summary ===

Total reads processed:                 100,000
Reads with adapters:                    40,205 (40.2%)
Reads written (passing filters):       100,000 (100.0%)

Total basepairs processed:    10,100,000 bp
Quality-trimmed:                  23,766 bp (0.2%)
Total written (filtered):      9,912,860 bp (98.1%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 40205 times

No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 26.9%
  C: 23.7%
  G: 23.2%
  T: 26.2%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	23386	25000.0	0	23386
2	6755	6250.0	0	6755
3	1994	1562.5	0	1994
4	1083	390.6	0	1083
5	472	97.7	0	472
6	461	24.4	0	461
7	445	6.1	0	445
8	378	1.5	0	378
9	350	0.4	0	349 1
10	402	0.1	1	366 36
11	259	0.0	1	248 11
12	284	0.0	1	273 11
13	282	0.0	1	272 10
14	292	0.0	1	283 9
15	255	0.0	1	250 5
16	223	0.0	1	218 5
17	253	0.0	1	243 10
18	202	0.0	1	201 1
19	231	0.0	1	226 5
20	167	0.0	1	166 1
21	179	0.0	1	175 4
22	162	0.0	1	161 1
23	152	0.0	1	147 5
24	138	0.0	1	133 5
25	120	0.0	1	118 2
26	107	0.0	1	100 7
27	107	0.0	1	102 5
28	131	0.0	1	130 1
29	104	0.0	1	101 3
30	101	0.0	1	99 2
31	71	0.0	1	71
32	59	0.0	1	57 2
33	81	0.0	1	78 3
34	59	0.0	1	56 3
35	46	0.0	1	46
36	48	0.0	1	47 1
37	39	0.0	1	37 2
38	31	0.0	1	30 1
39	30	0.0	1	30
40	32	0.0	1	31 1
41	50	0.0	1	49 1
42	14	0.0	1	14
43	11	0.0	1	11
44	17	0.0	1	16 1
45	15	0.0	1	15
46	22	0.0	1	22
47	11	0.0	1	11
48	16	0.0	1	16
49	17	0.0	1	16 1
50	16	0.0	1	16
51	7	0.0	1	7
52	7	0.0	1	7
53	7	0.0	1	7
54	3	0.0	1	3
55	1	0.0	1	1
56	3	0.0	1	3
57	4	0.0	1	4
58	1	0.0	1	1
59	3	0.0	1	3
61	2	0.0	1	2
62	3	0.0	1	3
63	3	0.0	1	3
65	1	0.0	1	1

RUN STATISTICS FOR INPUT FILE: WT_REP1_1.fastq.gz
=============================================
100000 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to 'WT_REP1_2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: WT_REP1_2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.7
Cutadapt version: 3.4
Number of cores used for trimming: 1
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Running FastQC with the following extra arguments: '-t 2'
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 3.4). Setting -j -j 1
Writing final adapter and quality trimmed output to WT_REP1_2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file WT_REP1_2.fastq.gz <<< 
This is cutadapt 3.4 with Python 3.9.6
Command line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC WT_REP1_2.fastq.gz
Processing reads on 1 core in single-end mode ...
Finished in 3.26 s (33 µs/read; 1.84 M reads/minute).

=== Summary ===

Total reads processed:                 100,000
Reads with adapters:                    44,773 (44.8%)
Reads written (passing filters):       100,000 (100.0%)

Total basepairs processed:    10,100,000 bp
Quality-trimmed:                  62,557 bp (0.6%)
Total written (filtered):      9,870,393 bp (97.7%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 44773 times

No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 34.6%
  C: 28.9%
  G: 18.6%
  T: 17.8%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	28510	25000.0	0	28510
2	5730	6250.0	0	5730
3	2682	1562.5	0	2682
4	845	390.6	0	845
5	542	97.7	0	542
6	450	24.4	0	450
7	439	6.1	0	439
8	389	1.5	0	389
9	368	0.4	0	358 10
10	364	0.1	1	356 8
11	243	0.0	1	235 8
12	315	0.0	1	304 11
13	243	0.0	1	237 6
14	332	0.0	1	323 9
15	232	0.0	1	224 8
16	218	0.0	1	213 5
17	319	0.0	1	310 9
18	148	0.0	1	145 3
19	235	0.0	1	231 4
20	160	0.0	1	153 7
21	150	0.0	1	144 6
22	174	0.0	1	172 2
23	149	0.0	1	144 5
24	152	0.0	1	148 4
25	98	0.0	1	92 6
26	127	0.0	1	119 8
27	97	0.0	1	95 2
28	143	0.0	1	139 4
29	84	0.0	1	82 2
30	121	0.0	1	119 2
31	58	0.0	1	58
32	58	0.0	1	56 2
33	76	0.0	1	74 2
34	67	0.0	1	67
35	45	0.0	1	44 1
36	48	0.0	1	46 2
37	34	0.0	1	34
38	34	0.0	1	34
39	31	0.0	1	29 2
40	29	0.0	1	28 1
41	35	0.0	1	35
42	24	0.0	1	24
43	15	0.0	1	15
44	20	0.0	1	20
45	15	0.0	1	15
46	25	0.0	1	25
47	7	0.0	1	7
48	19	0.0	1	19
49	14	0.0	1	14
50	15	0.0	1	13 2
51	8	0.0	1	8
52	6	0.0	1	5 1
53	8	0.0	1	8
54	2	0.0	1	2
55	1	0.0	1	1
56	3	0.0	1	3
57	4	0.0	1	4
58	1	0.0	1	1
59	3	0.0	1	2 1
61	2	0.0	1	2
62	3	0.0	1	3
63	3	0.0	1	3
66	1	0.0	1	1

RUN STATISTICS FOR INPUT FILE: WT_REP1_2.fastq.gz
=============================================
100000 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files WT_REP1_1_trimmed.fq.gz and WT_REP1_2_trimmed.fq.gz
file_1: WT_REP1_1_trimmed.fq.gz, file_2: WT_REP1_2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: WT_REP1_1_trimmed.fq.gz and WT_REP1_2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to WT_REP1_1_val_1.fq.gz
Writing validated paired-end Read 2 reads to WT_REP1_2_val_2.fq.gz

Total number of sequences analysed: 100000

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 434 (0.43%)


  >>> Now running FastQC on the validated data WT_REP1_1_val_1.fq.gz<<<

Started analysis of WT_REP1_1_val_1.fq.gz
Approx 5% complete for WT_REP1_1_val_1.fq.gz
Approx 10% complete for WT_REP1_1_val_1.fq.gz
Approx 15% complete for WT_REP1_1_val_1.fq.gz
Approx 20% complete for WT_REP1_1_val_1.fq.gz
Approx 25% complete for WT_REP1_1_val_1.fq.gz
Approx 30% complete for WT_REP1_1_val_1.fq.gz
Approx 35% complete for WT_REP1_1_val_1.fq.gz
Approx 40% complete for WT_REP1_1_val_1.fq.gz
Approx 45% complete for WT_REP1_1_val_1.fq.gz
Approx 50% complete for WT_REP1_1_val_1.fq.gz
Approx 55% complete for WT_REP1_1_val_1.fq.gz
Approx 60% complete for WT_REP1_1_val_1.fq.gz
Approx 65% complete for WT_REP1_1_val_1.fq.gz
Approx 70% complete for WT_REP1_1_val_1.fq.gz
Approx 75% complete for WT_REP1_1_val_1.fq.gz
Approx 80% complete for WT_REP1_1_val_1.fq.gz
Approx 85% complete for WT_REP1_1_val_1.fq.gz
Approx 90% complete for WT_REP1_1_val_1.fq.gz
Approx 95% complete for WT_REP1_1_val_1.fq.gz

  >>> Now running FastQC on the validated data WT_REP1_2_val_2.fq.gz<<<

Started analysis of WT_REP1_2_val_2.fq.gz
Approx 5% complete for WT_REP1_2_val_2.fq.gz
Approx 10% complete for WT_REP1_2_val_2.fq.gz
Approx 15% complete for WT_REP1_2_val_2.fq.gz
Approx 20% complete for WT_REP1_2_val_2.fq.gz
Approx 25% complete for WT_REP1_2_val_2.fq.gz
Approx 30% complete for WT_REP1_2_val_2.fq.gz
Approx 35% complete for WT_REP1_2_val_2.fq.gz
Approx 40% complete for WT_REP1_2_val_2.fq.gz
Approx 45% complete for WT_REP1_2_val_2.fq.gz
Approx 50% complete for WT_REP1_2_val_2.fq.gz
Approx 55% complete for WT_REP1_2_val_2.fq.gz
Approx 60% complete for WT_REP1_2_val_2.fq.gz
Approx 65% complete for WT_REP1_2_val_2.fq.gz
Approx 70% complete for WT_REP1_2_val_2.fq.gz
Approx 75% complete for WT_REP1_2_val_2.fq.gz
Approx 80% complete for WT_REP1_2_val_2.fq.gz
Approx 85% complete for WT_REP1_2_val_2.fq.gz
Approx 90% complete for WT_REP1_2_val_2.fq.gz
Approx 95% complete for WT_REP1_2_val_2.fq.gz
Deleting both intermediate output files WT_REP1_1_trimmed.fq.gz and WT_REP1_2_trimmed.fq.gz

====================================================================================================

